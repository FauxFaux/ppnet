package default4 import scala.concurrent.duration._ import io.gatling.core.Predef._ import io.gatling.http.Predef._ import io.gatling.jdbc.Predef._ class RecordedSimulateloginFalse extends Simulation { println("Simulation about login will begin") val httpProtocol = http .inferHtmlResources(WhiteList(), BlackList()) .acceptHeader("application/json, text/plain, */*") .userAgentHeader("Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Ubuntu Chromium/50.0.2661.102 Chrome/50.0.2661.102 Safari/537.36") val headers_0 = Map( "Accept" -> "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8", "Accept-Encoding" -> "gzip, deflate, sdch", "Accept-Language" -> "fr-FR,fr;q=0.8,en-US;q=0.6,en;q=0.4", "Cache-Control" -> "max-age=0", "Connection" -> "keep-alive", "If-Modified-Since" -> "Fri, 11 Sep 2015 18:01:31 GMT", "Upgrade-Insecure-Requests" -> "1") val headers_1 = Map( "Accept-Encoding" -> "gzip, deflate, sdch", "Accept-Language" -> "fr-FR,fr;q=0.8,en-US;q=0.6,en;q=0.4", "Cache-Control" -> "max-age=0", "Connection" -> "keep-alive") val headers_3 = Map( "Accept-Encoding" -> "gzip, deflate, sdch", "Accept-Language" -> "fr-FR,fr;q=0.8,en-US;q=0.6,en;q=0.4", "Cache-Control" -> "max-age=0", "Connection" -> "keep-alive", "Content-Type" -> "application/json;charset=UTF-8", "Origin" -> "http://0.0.0.0:3030") val headers_5 = Map( "Accept-Encoding" -> "gzip, deflate, sdch", "Accept-Language" -> "fr-FR,fr;q=0.8,en-US;q=0.6,en;q=0.4", "Cache-Control" -> "max-age=0", "Connection" -> "keep-alive", "If-Modified-Since" -> "Fri, 11 Sep 2015 18:01:31 GMT") val headers_7 = Map( "Accept" -> "image/webp,image/*,*/*;q=0.8", "Accept-Encoding" -> "gzip, deflate, sdch", "Accept-Language" -> "fr-FR,fr;q=0.8,en-US;q=0.6,en;q=0.4", "Cache-Control" -> "max-age=0", "Connection" -> "keep-alive", "If-Modified-Since" -> "Fri, 11 Sep 2015 18:01:31 GMT") val headers_9 = Map( "Accept-Encoding" -> "gzip, deflate", "Accept-Language" -> "fr-FR,fr;q=0.8,en-US;q=0.6,en;q=0.4", "Connection" -> "keep-alive", "Content-Type" -> "application/json;charset=UTF-8", "Origin" -> "http://0.0.0.0:3030") val headers_11 = Map( "Accept" -> "image/webp,image/*,*/*;q=0.8", "Accept-Encoding" -> "gzip, deflate, sdch", "Accept-Language" -> "fr-FR,fr;q=0.8,en-US;q=0.6,en;q=0.4", "Connection" -> "keep-alive") val headers_12 = Map( "Accept-Encoding" -> "gzip, deflate, sdch", "Accept-Language" -> "fr-FR,fr;q=0.8,en-US;q=0.6,en;q=0.4", "Connection" -> "keep-alive") val uri1 = "http://0.0.0.0:3030/_matrix/client" object Index{ val index=exec(http("Init") .resources(http("Acces api") http("Access sync") http("presence") http("turnServer") http("Login page") http("list event") http("logo picture") http("event") object Login{ val feeder =csv("login.csv").random val login= exec(feed(feeder)) .headers(headers_9) .resources(http("Home user") http("Logo-small") http("TurnServer Access") http("DisplayName") http("Get public Room") http("profile info") http("Info recent event") http("Close picture") .exec(session => { println("Simulation about login is finished") val admins=scenario("Admins").exec(Index.index,Login.login) rampUsers(10) over (10 seconds)) .throttle(reachRps(10) in (10 seconds), holdFor(15 seconds),jumpToRps(50),holdFor(10 seconds)))
