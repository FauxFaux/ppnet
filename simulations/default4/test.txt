package default4

import scala.concurrent.duration._

import io.gatling.core.Predef._
import io.gatling.http.Predef._
import io.gatling.jdbc.Predef._

class RecordedSimulateloginFalse extends Simulation {
before{
	println("Simulation about login will begin")
}

	val httpProtocol = http
		.baseURL("http:
		.inferHtmlResources(WhiteList(), BlackList())
		.acceptHeader("application
		.userAgentHeader("Mozilla

	val headers_0 = Map(
		"Accept" -> "text
		"Accept-Encoding" -> "gzip, deflate, sdch",
		"Accept-Language" -> "fr-FR,fr;q=0.8,en-US;q=0.6,en;q=0.4",
		"Cache-Control" -> "max-age=0",
		"Connection" -> "keep-alive",
		"If-Modified-Since" -> "Fri, 11 Sep 2015 18:01:31 GMT",
		"Upgrade-Insecure-Requests" -> "1")

	val headers_1 = Map(
		"Accept-Encoding" -> "gzip, deflate, sdch",
		"Accept-Language" -> "fr-FR,fr;q=0.8,en-US;q=0.6,en;q=0.4",
		"Cache-Control" -> "max-age=0",
		"Connection" -> "keep-alive")

	val headers_3 = Map(
		"Accept-Encoding" -> "gzip, deflate, sdch",
		"Accept-Language" -> "fr-FR,fr;q=0.8,en-US;q=0.6,en;q=0.4",
		"Cache-Control" -> "max-age=0",
		"Connection" -> "keep-alive",
		"Content-Type" -> "application
		"Origin" -> "http:

	val headers_5 = Map(
		"Accept-Encoding" -> "gzip, deflate, sdch",
		"Accept-Language" -> "fr-FR,fr;q=0.8,en-US;q=0.6,en;q=0.4",
		"Cache-Control" -> "max-age=0",
		"Connection" -> "keep-alive",
		"If-Modified-Since" -> "Fri, 11 Sep 2015 18:01:31 GMT")

	val headers_7 = Map(
		"Accept" -> "image
		"Accept-Encoding" -> "gzip, deflate, sdch",
		"Accept-Language" -> "fr-FR,fr;q=0.8,en-US;q=0.6,en;q=0.4",
		"Cache-Control" -> "max-age=0",
		"Connection" -> "keep-alive",
		"If-Modified-Since" -> "Fri, 11 Sep 2015 18:01:31 GMT")

	val headers_9 = Map(
		"Accept-Encoding" -> "gzip, deflate",
		"Accept-Language" -> "fr-FR,fr;q=0.8,en-US;q=0.6,en;q=0.4",
		"Connection" -> "keep-alive",
		"Content-Type" -> "application
		"Origin" -> "http:

	val headers_11 = Map(
		"Accept" -> "image
		"Accept-Encoding" -> "gzip, deflate, sdch",
		"Accept-Language" -> "fr-FR,fr;q=0.8,en-US;q=0.6,en;q=0.4",
		"Connection" -> "keep-alive")

	val headers_12 = Map(
		"Accept-Encoding" -> "gzip, deflate, sdch",
		"Accept-Language" -> "fr-FR,fr;q=0.8,en-US;q=0.6,en;q=0.4",
		"Connection" -> "keep-alive")

    val uri1 = | "http:

	object Index{
		val index=exec(http("Init")
			.get("
			.headers(headers_0)
			.resources(http("Acces api")
			.get("
			.headers(headers_1)
			.check(status.is(200)),
            http("Access sync")
			.get("
			.headers(headers_1)
			.check(status.is(200)),
            http("presence")
			.put("
			.headers(headers_3)
			.body(RawFileBody("RecordedSimulatelogin_0003_request.txt"))
			.check(status.is(200)),
            http("turnServer")
			.get("
			.headers(headers_1)
			.check(status.is(200)),
            http("Login page")
			.get("
			.headers(headers_5)
			.check(status.is(304)),
            http("list event")
			.get("
			.headers(headers_1)
			.check(status.is(200)),
            http("logo picture")
			.get("
			.headers(headers_7)
			.check(status.is(304)),
            http("event")
			.get("
			.headers(headers_1)
			.check(status.is(200)))
			.check(status.is(304)))
			.pause(7)
		}
		object Login{
			 val feeder =csv("login.csv").random
			
		val login= exec(feed(feeder))
		.exec(http("login")
			.post("
			.headers(headers_9) 
			.body(StringBody("""{"user":"${login}","password":"${password}","type":"m.login.passwor"}"""))
			.resources(http("Home user")
			.get("
			.check(status.is(200)),
        
            http("Logo-small")
			.get("
			.headers(headers_11)
			.check(status.is(200)),
            http("TurnServer Access")
			.get("
			.headers(headers_12)
			.check(status.is(200)),
            http("DisplayName")
			.get("
			.headers(headers_12)
			.check(status.is(200)),
            http("Get public Room")
			.get("
			.headers(headers_12)
			.check(status.is(200)),
            http("profile info")
			.get("
			.headers(headers_12)
			.check(status.is(200)),
            http("Info recent event")
			.get("
			.check(status.is(200))
			.check(currentLocation.saveAs("ccurrentLocation"))
			.check(responseTimeInMillis.saveAs("responseTime"))
			.check(regex("""https:
			
			
            http("Close picture")
			.get("
			.headers(headers_11)
			.check(status.is(200)))
			.check(status.is(200)))
			
			.exec(session => {
				println("test"+session)
				session
			})

}
after{
	println("Simulation about login is finished")
}
val admins=scenario("Admins").exec(Index.index,Login.login)
	setUp(admins.inject(
	rampUsers(10) over (10 seconds))
	.throttle(reachRps(10) in (10 seconds), holdFor(15 seconds),jumpToRps(50),holdFor(10 seconds)))
	.assertions(
	global.responseTime.max.lessThan(50),
	forAll.failedRequests.count.lessThan(5),
	details("Login").successfulRequests.percent.greaterThan(90))
	.protocols(httpProtocol)
	
}
